<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd">


    <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" />

    <!-- 第一种方式定义job，此方式合适仅仅需要调用特定类对象的某个方法。
        通过SimpleTriggerFactoryBean创建job（顾名思义，JobDetail的bean工厂的方法反射类，FactoryBean<JobDetail>的实现类），
        由它的对象调用我们要执行的类的方法 -->
    <bean id="JOB_testJob_executeJob1"  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 具体要执行的类，此处的testJob已采用注解的方式注入 -->
        <property name="targetObject" ref="testJob" />
        <property name="targetMethod" value="executeJob1" /><!-- 具体要执行的方法 -->
    </bean>
    <!-- 触发器 -->
    <bean id="Trigger_testJob_executeJob1"  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="JOB_testJob_executeJob1" />
        <property name="cronExpression" value="0/5 * * ? * *" />
    </bean>


    <!-- 第二种方式定义job，需要作业类完全继承QuartzJobBeann -->
    <bean name="JOB_businessJob1" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="com.kstarrain.job.BusinessJob1" />
        <!-- 注入service，一定要有set方法 -->
        <property name="jobDataMap">
            <map>
                <entry key="testService" value-ref="testServiceImpl" />
            </map>
        </property>
        <property name="durability" value="true" />
    </bean>
    <bean id="Trigger_businessJob1"  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="JOB_businessJob1" />
        <property name="cronExpression" value="0/1 * * * * ?" />
    </bean>


    <bean name="JOB_businessJob2" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="com.kstarrain.job.BusinessJob2" />
        <property name="jobDataMap">
            <map>
                <entry key="testService" value-ref="testServiceImpl" />
            </map>
        </property>
        <property name="durability" value="true" />
    </bean>
    <bean id="Trigger_businessJob2"  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="JOB_businessJob2" />
        <property name="cronExpression" value="0/1 * * * * ?" />
    </bean>



        <!-- Scheduler factory bean to glue together jobDetails and triggers to Configure Quartz Scheduler -->
    <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="jobDetails">
            <list>
                <!--<ref bean="JOB_testJob_executeJob1" />-->
                <ref bean="JOB_businessJob1" />
                <!--<ref bean="JOB_businessJob2" />-->
            </list>
        </property>

        <property name="triggers">
            <list>
                <!--<ref bean="Trigger_testJob_executeJob1" />-->
                <ref bean="Trigger_businessJob1" />
                <!--<ref bean="Trigger_businessJob2" />-->
            </list>
        </property>
    </bean>



    <!--设置系统管理器,必须使用getInstance()初始化实例,系统整体设计管理器全部为单例-->
    <bean class="com.github.quartzweb.manager.quartz.QuartzManager" factory-method="getInstance">
        <!--设置scheduler集合-->
        <property name="schedulers">
            <list>
                <ref bean="schedulerFactoryBean" />
            </list>
        </property>
        <!--设置是否查找scheduler仓库-->
        <property name="lookupSchedulerRepository" value="false"/>
        <!--是否启动默认scheduler-->
        <property name="useDefaultScheduler" value="false"/>
    </bean>

    <!--声明bean获取管理器,通过构造函数方式获取-->
    <bean id="constructorQuartzBeanManager" class="com.github.quartzweb.manager.bean.ConstructorQuartzBeanManager">
        <property name="priority" value="5" />
    </bean>
    <!--设置bean管理器,通过spring的applicationContext获取-->
    <bean id="springQuartzBeanManager" class="com.github.quartzweb.manager.bean.SpringQuartzBeanManager">
        <property name="priority" value="10" />
    </bean>

    <!--声明bean管理器门面,必须使用getInstance()初始化实例-->
    <bean id="quartzBeanManagerFacade" class="com.github.quartzweb.manager.bean.QuartzBeanManagerFacade"
          factory-method="getInstance">
        <!--设置管理器,根据优先级排序-->
        <property name="quartzBeanManagers">
            <list>
                <ref bean="springQuartzBeanManager"/>
                <ref bean="constructorQuartzBeanManager"/>
            </list>
        </property>
        <!--是否启用默认bean管理器-->
        <property name="useDefaultQuartzBeanManager" value="false"/>
    </bean>


</beans>