<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd">


  <!-- 为了引入数据源dataSource -->
  <import resource="classpath:config/application-jdbc.xml"/>


  <!--参考文档 https://blog.csdn.net/liaohaojian/article/details/70139151-->
  <!--DataSourceTransactionManager位于org.springframework.jdbc.datasource包下，数据源事务管理类，提供对单个javax.sql.DataSource数据源的事务管理，
      主要用于JDBC，Mybatis框架事务管理。 -->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource" />
  </bean>


  <!-- 第一种:编程式事务  注入spring事务模板类 -->
  <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
    <property name="transactionManager" ref="transactionManager" />
  </bean>

  <!-- 第二种:xml配置aop事务 配置事务通知 -->
  <tx:advice id="txAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <!-- 以方法为单位,指定方法应用什么事务属性 isolation:隔离级别 propagation:传播行为 read-only:是否只读 -->
      <tx:method name="xml*" isolation="DEFAULT" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
    </tx:attributes>
  </tx:advice>


  <!-- 配置切面织入的范围,后边要把事务边界定在service层  -->
  <aop:config>
    <!-- 配置切点表达式 参考文档：https://www.cnblogs.com/zhangxufeng/p/9160869.html
         execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern) throws-pattern?)
         这里问号表示当前项可以有也可以没有，其中各项的语义如下：
           modifiers-pattern：方法的可见性，如public，protected
           ret-type-pattern：方法的返回值类型，如int，void等
           declaring-type-pattern：方法所在类的全路径名，如com.spring.Aspect
           name-pattern：方法名类型，如buisinessService()
           param-pattern：方法的参数类型，如java.lang.String
           throws-pattern：方法抛出的异常类型，如java.lang.Exception -->
    <aop:pointcut id="txPointcut" expression="execution(* com.kstarrain.service.impl.*ServiceImpl.*(..))"  />
    <!-- 配置切面 : 通知+切点 advice-ref:通知的名称 pointcut-ref:切点的名称 -->
    <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
  </aop:config>


  <!-- 第三种:注解配置aop事务   开启事务注解支持 -->
  <tx:annotation-driven transaction-manager="transactionManager" />



</beans>